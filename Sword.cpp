//include some standard libraries
#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <iostream>

//include OpenGL libraries
#include <GL/glew.h>
#include <GLFW/glfw3.h>

//include some custom code files
#include "glfunctions.h" //include all OpenGL stuff
#include "Shader.h" // class to compile shaders

using namespace std;
using namespace glm;

//global variables to help us do things
int g_ViewportWidth = 512; int g_ViewportHeight = 512; // Default window size, in pixels
double mouse_x, mouse_y; //variables storing mouse position
const vec3 g_backgroundColor(0.255f, 0.255f, 0.255f); // background colour - a GLM 3-component vector


GLuint g_simpleShader = 0; //shader identifier
GLuint g_Vao = 0; //vao
GLuint g_NumTriangles = 0; //  Numbre of triangles we are painting.

// ------------------------------------------------------------------------------------------
// This function manually creates a square geometry (defined in the array vertices[])
// ------------------------------------------------------------------------------------------
void load()
{
	//**********************
	// CODE TO SET GEOMETRY
	//**********************
	int fort = (0.015f, 0.061f, 0.054f);
	int fluix = (0.048f, 0.235f, 0.204f);
	int mitja = (0.051f, 0.201f, 0.179f);
	int azul = (0.048f, 0.235f, 0.204f);


	//the positions of the corner of the square, each a 3-component vector, x, y, z
	const GLfloat vertices[] = {
		//Fons
		-1.0f, 1.0f, 0.0f,
		1.0f, 1.0f, 0.0f,
		1.0f, -1.0f, 0.0f,

		-1.0f, 1.0f, 0.0f,
		-1.0f, -1.0f, 0.0f,
		1.0f, -1.0f, 0.0f,


		//contorn
		-0.9f, 0.9f, 0.0f,
		-0.9f, 0.6f, 0.0f,
		-0.8f, 0.6f, 0.0f,

		-0.9f, 0.9f, 0.0f,
		-0.8f, 0.9f, 0.0f,
		-0.8f, 0.6f, 0.0f,
		//-----------------
		- 0.9f, 0.9f, 0.0f,
		-0.6f, 0.9f, 0.0f,
		-0.6f, 0.8f, 0.0f,
		
		-0.9f, 0.9f, 0.0f,
		-0.9f, 0.8f, 0.0f,
		-0.6f, 0.8f, 0.0f,
		//-----------------
		-0.8f, 0.6f, 0.0f,
		-0.8f, 0.5f, 0.0f,
		-0.7f, 0.5f, 0.0f,

		-0.8f, 0.6f, 0.0f,
		-0.7f, 0.5f, 0.0f,
		-0.7f, 0.6f, 0.0f,
		//-----------------
		-0.6f, 0.4f, 0.0f,
		-0.7f, 0.4f, 0.0f,
		-0.7f, 0.5f, 0.0f,

		-0.6f, 0.5f, 0.0f,
		-0.7f, 0.5f, 0.0f,
		-0.6f, 0.4f, 0.0f,
		//----------------
		-0.6f, 0.4f, 0.0f,
		-0.5f, 0.4f, 0.0f,
		-0.5f, 0.3f, 0.0f,

		-0.6f, 0.4f, 0.0f,
		-0.6f, 0.3f, 0.0f,
		-0.5f, 0.3f, 0.0f,
		//----------------
		-0.5f, 0.3f, 0.0f,
		-0.4f, 0.3f, 0.0f,
		-0.4f, 0.2f, 0.0f,

		-0.5f, 0.3f, 0.0f,
		-0.5f, 0.2f, 0.0f,
		-0.4f, 0.2f, 0.0f,
		//----------------
		-0.4f, 0.2f, 0.0f,
		-0.3f, 0.2f, 0.0f,
		-0.3f, 0.1f, 0.0f,

		-0.4f, 0.2f, 0.0f,
		-0.4f, 0.1f, 0.0f,
		-0.3f, 0.1f, 0.0f,
		//----------------
		-0.3f, 0.1f, 0.0f,
		-0.2f, 0.1f, 0.0f,
		-0.2f, 0.0f, 0.0f,

		-0.3f, 0.1f, 0.0f,
		-0.3f, 0.0f, 0.0f,
		-0.2f, 0.0f, 0.0f,
		//----------------
		-0.2f, 0.0f, 0.0f,
		-0.1f, 0.0f, 0.0f,
		-0.1f, -0.1f, 0.0f,

		-0.2f, 0.0f, 0.0f,
		-0.2f, -0.1f, 0.0f,
		-0.1f, -0.1f, 0.0f,
		//----------------
		-0.1f, -0.1f, 0.0f,
		0.1f, -0.1f, 0.0f,
		0.1f, -0.2f, 0.0f,

		-0.1f, -0.1f, 0.0f,
		-0.1f, -0.2f, 0.0f,
		0.1f, -0.2f, 0.0f,
		//----------------
		-0.6f, 0.8f, 0.0f,
		-0.5f, 0.8f, 0.0f,
		-0.5f, 0.7f, 0.0f,

		-0.6f, 0.8f, 0.0f,
		-0.6f, 0.7f, 0.0f,
		-0.5f, 0.7f, 0.0f,
		//----------------
		-0.5f, 0.7f, 0.0f,
		-0.4f, 0.7f, 0.0f,
		-0.4f, 0.6f, 0.0f,

		-0.5f, 0.7f, 0.0f,
		-0.5f, 0.6f, 0.0f,
		-0.4f, 0.6f, 0.0f,
		//----------------
		-0.4f, 0.6f, 0.0f,
		-0.3f, 0.6f, 0.0f,
		-0.3f, 0.5f, 0.0f,

		-0.4f, 0.6f, 0.0f,
		-0.4f, 0.5f, 0.0f,
		-0.3f, 0.5f, 0.0f,
		//----------------
		-0.3f, 0.5f, 0.0f,
		-0.2f, 0.5f, 0.0f,
		-0.2f, 0.4f, 0.0f,

		-0.3f, 0.5f, 0.0f,
		-0.3f, 0.4f, 0.0f,
		-0.2f, 0.4f, 0.0f,
		//----------------
		-0.2f, 0.4f, 0.0f,
		-0.1f, 0.4f, 0.0f,
		-0.1f, 0.3f, 0.0f,

		-0.2f, 0.4f, 0.0f,
		-0.2f, 0.3f, 0.0f,
		-0.1f, 0.3f, 0.0f,
		//----------------
		-0.1f, 0.3f, 0.0f,
		0.0f, 0.3f, 0.0f,
		0.0f, 0.2f, 0.0f,

		-0.1f, 0.3f, 0.0f,
		-0.1f, 0.2f, 0.0f,
		0.0f, 0.2f, 0.0f,
		//---------------
		0.0f, 0.2f, 0.0f,
		0.1f, 0.2f, 0.0f,
		0.1f, 0.1f, 0.0f,

		0.0f, 0.2f, 0.0f,
		0.0f, 0.1f, 0.0f,
		0.1f, 0.1f, 0.0f,
		//---------------
		0.1f, 0.1f, 0.0f,
		0.2f, 0.1f, 0.0f,
		0.2f, -0.1f, 0.0f,

		0.1f, 0.1f, 0.0f,
		0.1f, -0.1f, 0.0f,
		0.2f, -0.1f, 0.0f,
		//----------------
		0.2f, 0.2f, 0.0f,
		0.3f, 0.2f, 0.0f,
		0.3f, 0.1f, 0.0f,

		0.2f, 0.2f, 0.0f,
		0.2f, 0.1f, 0.0f,
		0.3f, 0.1f, 0.0f,
		//---------------
		0.3f, 0.3f, 0.0f,
		0.5f, 0.3f, 0.0f,
		0.5f, 0.2f, 0.0f,

		0.3f, 0.3f, 0.0f,
		0.3f, 0.2f, 0.0f,
		0.5f, 0.2f, 0.0f,
		//---------------
		0.4f, 0.3f, 0.0f,
		0.5f, 0.3f, 0.0f,
		0.5f, 0.1f, 0.0f,

		0.4f, 0.3f, 0.0f,
		0.4f, 0.1f, 0.0f,
		0.5f, 0.1f, 0.0f,
		//---------------
		0.3f, 0.1f, 0.0f,
		0.4f, 0.1f, 0.0f,
		0.4f, -0.1f, 0.0f,

		0.3f, 0.1f, 0.0f,
		0.3f, -0.1f, 0.0f,
		0.4f, -0.1f, 0.0f,
		//---------------
		0.2f, -0.1f, 0.0f,
		0.3f, -0.1f, 0.0f,
		0.3f, -0.2f, 0.0f,

		0.2f, -0.1f, 0.0f,
		0.2f, -0.2f, 0.0f,
		0.3f, -0.2f, 0.0f,
			//---------------
		0.1f, -0.2f, 0.0f,
		0.2f, -0.2f, 0.0f,
		0.2f, -0.3f, 0.0f,

		0.1f, -0.2f, 0.0f,
		0.1f, -0.3f, 0.0f,
		0.2f, -0.3f, 0.0f,

			//manec
		0.2f, -0.2f, 0.0f,
		0.3f, -0.2f, 0.0f,
		0.3f, -0.3f, 0.0f,

		0.2f, -0.2f, 0.0f,
		0.2f, -0.3f, 0.0f,
		0.3f, -0.3f, 0.0f,

			//-------------
		0.3f, -0.3f, 0.0f,
		0.4f, -0.3f, 0.0f,
		0.4f, -0.4f, 0.0f,

		0.3f, -0.3f, 0.0f,
		0.3f, -0.4f, 0.0f,
		0.4f, -0.4f, 0.0f,

			//-------------
			0.4f, -0.4f, 0.0f,
			0.5f, -0.4f, 0.0f,
			0.5f, -0.5f, 0.0f,

			0.4f, -0.4f, 0.0f,
			0.4f, -0.5f, 0.0f,
			0.5f, -0.5f, 0.0f,

			//-------------
			0.5f, -0.5f, 0.0f,
			0.6f, -0.5f, 0.0f,
			0.6f, -0.6f, 0.0f,

			0.5f, -0.5f, 0.0f,
			0.5f, -0.6f, 0.0f,
			0.6f, -0.6f, 0.0f,

			//-------------
			0.6f, -0.6f, 0.0f,
			0.7f, -0.6f, 0.0f,
			0.7f, -0.7f, 0.0f,

			0.6f, -0.6f, 0.0f,
			0.6f, -0.7f, 0.0f,
			0.7f, -0.7f, 0.0f,

			//-------------
			0.6f, -0.5f, 0.0f,
			0.7f, -0.5f, 0.0f,
			0.7f, -0.6f, 0.0f,

			0.6f, -0.5f, 0.0f,
			0.6f, -0.6f, 0.0f,
			0.7f, -0.6f, 0.0f,

			//-------------
			0.6f, -0.4f, 0.0f,
			0.7f, -0.4f, 0.0f,
			0.7f, -0.5f, 0.0f,

			0.6f, -0.4f, 0.0f,
			0.6f, -0.5f, 0.0f,
			0.7f, -0.5f, 0.0f,

			//-------------
			0.5f, -0.4f, 0.0f,
			0.6f, -0.4f, 0.0f,
			0.6f, -0.5f, 0.0f,

			0.5f, -0.4f, 0.0f,
			0.5f, -0.5f, 0.0f,
			0.6f, -0.5f, 0.0f,

			//-------------
			0.5f, -0.6f, 0.0f,
			0.6f, -0.6f, 0.0f,
			0.6f, -0.7f, 0.0f,

			0.5f, -0.6f, 0.0f,
			0.5f, -0.7f, 0.0f,
			0.6f, -0.7f, 0.0f,

			//-------------
			0.4f, -0.6f, 0.0f,
			0.5f, -0.6f, 0.0f,
			0.5f, -0.7f, 0.0f,

			0.4f, -0.6f, 0.0f,
			0.4f, -0.7f, 0.0f,
			0.5f, -0.7f, 0.0f,
			
			//-------------
			0.4f, -0.5f, 0.0f,
			0.5f, -0.5f, 0.0f,
			0.5f, -0.6f, 0.0f,

			0.4f, -0.5f, 0.0f,
			0.4f, -0.6f, 0.0f,
			0.5f, -0.6f, 0.0f,

			//-------------
			0.3f, -0.4f, 0.0f,
			0.4f, -0.4f, 0.0f,
			0.4f, -0.5f, 0.0f,

			0.3f, -0.4f, 0.0f,
			0.3f, -0.5f, 0.0f,
			0.4f, -0.5f, 0.0f,

			//-------------
			0.2f, -0.3f, 0.0f,
			0.3f, -0.3f, 0.0f,
			0.3f, -0.4f, 0.0f,

			0.2f, -0.3f, 0.0f,
			0.2f, -0.4f, 0.0f,
			0.3f, -0.4f, 0.0f,

			//-------------
			0.3f, -0.2f, 0.0f,
			0.4f, -0.2f, 0.0f,
			0.4f, -0.3f, 0.0f,

			0.3f, -0.2f, 0.0f,
			0.3f, -0.3f, 0.0f,
			0.4f, -0.3f, 0.0f,

			//-------------
			0.4f, -0.3f, 0.0f,
			0.5f, -0.3f, 0.0f,
			0.5f, -0.4f, 0.0f,

			0.4f, -0.3f, 0.0f,
			0.4f, -0.4f, 0.0f,
			0.5f, -0.4f, 0.0f,
					   			 
			//fi manec

			//segueix contorn
			//---------------
		-0.1f, -0.3f, 0.0f,
		0.1f, -0.3f, 0.0f,
		0.1f, -0.4f, 0.0f,

		-0.1f, -0.3f, 0.0f,
		-0.1f, -0.4f, 0.0f,
		0.1f, -0.4f, 0.0f,
			//---------------
		-0.3f, -0.4f, 0.0f,
		-0.1f, -0.4f, 0.0f,
		-0.1f, -0.5f, 0.0f,

		-0.3f, -0.4f, 0.0f,
		-0.3f, -0.5f, 0.0f,
		-0.1f, -0.5f, 0.0f,
			//---------------
		-0.3f, -0.3f, 0.0f,
		-0.2f, -0.3f, 0.0f,
		-0.2f, -0.4f, 0.0f,

		-0.3f, -0.3f, 0.0f,
		-0.3f, -0.4f, 0.0f,
		-0.2f, -0.4f, 0.0f,
			//---------------
		-0.2f, -0.2f, 0.0f,
		-0.1f, -0.2f, 0.0f,
		-0.1f, -0.3f, 0.0f,

		-0.2f, -0.2f, 0.0f,
		-0.2f, -0.3f, 0.0f,
		-0.1f, -0.3f, 0.0f,
		//relleno
		//sup. esquerra
		-0.8f, 0.8f, 0.0f,
		-0.8f, 0.7f, 0.0f,
		-0.7f, 0.7f, 0.0f,

		-0.8f, 0.8f, 0.0f,
		-0.7f, 0.8f, 0.0f,
		-0.7f, 0.7f, 0.0f,
		//sup.dret
		-0.7f, 0.8f, 0.0f,
		-0.6f, 0.8f, 0.0f,
		-0.7f, 0.7f, 0.0f,

		-0.6f, 0.7f, 0.0f,
		-0.7f, 0.7f, 0.0f,
		-0.6f, 0.8f, 0.0f,

		//---------
		-0.6f, 0.7f, 0.0f,
		-0.5f, 0.7f, 0.0f,
		-0.6f, 0.6f, 0.0f,

		-0.5f, 0.6f, 0.0f,
		-0.6f, 0.6f, 0.0f,
		-0.5f, 0.7f, 0.0f,

		//---------
		-0.5f, 0.6f, 0.0f,
		-0.4f, 0.6f, 0.0f,
		-0.5f, 0.5f, 0.0f,

		-0.4f, 0.5f, 0.0f,
		-0.5f, 0.5f, 0.0f,
		-0.4f, 0.6f, 0.0f,

		//---------
		-0.4f, 0.5f, 0.0f,
		-0.3f, 0.5f, 0.0f,
		-0.4f, 0.4f, 0.0f,

		-0.3f, 0.4f, 0.0f,
		-0.4f, 0.4f, 0.0f,
		-0.3f, 0.5f, 0.0f,

		//---------
		-0.3f, 0.4f, 0.0f,
		-0.2f, 0.4f, 0.0f,
		-0.3f, 0.3f, 0.0f,

		-0.2f, 0.3f, 0.0f,
		-0.3f, 0.3f, 0.0f,
		-0.2f, 0.4f, 0.0f,

		//---------
		-0.2f, 0.3f, 0.0f,
		-0.1f, 0.3f, 0.0f,
		-0.2f, 0.2f, 0.0f,

		-0.1f, 0.2f, 0.0f,
		-0.2f, 0.2f, 0.0f,
		-0.1f, 0.3f, 0.0f,

		//---------
		-0.1f, 0.2f, 0.0f,
		0.0f, 0.2f, 0.0f,
		-0.1f, 0.1f, 0.0f,

		0.0f, 0.1f, 0.0f,
		-0.1f, 0.1f, 0.0f,
		0.0f, 0.2f, 0.0f,

		//---------
		0.0f, 0.1f, 0.0f,
		0.1f, 0.1f, 0.0f,
		0.0f, 0.0f, 0.0f,

		0.1f, 0.0f, 0.0f,
		-0.1f, 0.0f, 0.0f,
		0.1f, 0.1f, 0.0f,

		0.0f, 0.1f, 0.0f,
		0.1f, 0.1f, 0.0f,
		0.0f, 0.0f, 0.0f,

		//inf. esquerra
		-0.8f, 0.7f, 0.0f,
		-0.8f, 0.6f, 0.0f,
		-0.7f, 0.7f, 0.0f,

		-0.8f, 0.6f, 0.0f,
		-0.7f, 0.7f, 0.0f,
		-0.7f, 0.6f, 0.0f,

		//-------
		-0.7f, 0.6f, 0.0f,
		-0.7f, 0.5f, 0.0f,
		-0.6f, 0.6f, 0.0f,

		-0.7f, 0.5f, 0.0f,
		-0.6f, 0.6f, 0.0f,
		-0.6f, 0.5f, 0.0f,

		//-------
		-0.6f, 0.5f, 0.0f,
		-0.6f, 0.4f, 0.0f,
		-0.5f, 0.5f, 0.0f,

		-0.6f, 0.4f, 0.0f,
		-0.5f, 0.5f, 0.0f,
		-0.5f, 0.4f, 0.0f,

		//-------
		-0.5f, 0.4f, 0.0f,
		-0.5f, 0.3f, 0.0f,
		-0.4f, 0.4f, 0.0f,

		-0.5f, 0.3f, 0.0f,
		-0.4f, 0.4f, 0.0f,
		-0.4f, 0.3f, 0.0f,

		//-------
		-0.4f, 0.3f, 0.0f,
		-0.4f, 0.2f, 0.0f,
		-0.3f, 0.3f, 0.0f,

		-0.4f, 0.2f, 0.0f,
		-0.3f, 0.3f, 0.0f,
		-0.3f, 0.2f, 0.0f,

		//-------
		-0.3f, 0.2f, 0.0f,
		-0.3f, 0.1f, 0.0f,
		-0.2f, 0.2f, 0.0f,

		-0.3f, 0.1f, 0.0f,
		-0.2f, 0.2f, 0.0f,
		-0.2f, 0.1f, 0.0f,

		//-------
		-0.2f, 0.1f, 0.0f,
		-0.2f, 0.0f, 0.0f,
		-0.1f, 0.1f, 0.0f,

		-0.2f, 0.0f, 0.0f,
		-0.1f, 0.1f, 0.0f,
		-0.1f, 0.0f, 0.0f,

		//-------
		-0.1f, 0.0f, 0.0f,
		-0.1f, -0.1f, 0.0f,
		0.0f, 0.0f, 0.0f,

		-0.1f, -0.1f, 0.0f,
		0.0f, 0.0f, 0.0f,
		0.0f, -0.1f, 0.0f, //aqui

		//inf. derecha
		-0.6f, 0.6f, 0.0f,
		-0.7f, 0.6f, 0.0f,
		-0.7f, 0.7f, 0.0f,

		-0.6f, 0.7f, 0.0f,
		-0.7f, 0.7f, 0.0f,
		-0.6f, 0.6f, 0.0f,
		
		//----------------
		-0.6f, 0.6f, 0.0f,
		-0.5f, 0.6f, 0.0f,
		-0.5f, 0.5f, 0.0f,

		-0.6f, 0.6f, 0.0f,
		-0.6f, 0.5f, 0.0f,
		-0.5f, 0.5f, 0.0f,
		//----------------
		-0.5f, 0.5f, 0.0f,
		-0.4f, 0.5f, 0.0f,
		-0.4f, 0.4f, 0.0f,

		-0.5f, 0.5f, 0.0f,
		-0.5f, 0.4f, 0.0f,
		-0.4f, 0.4f, 0.0f,

		//----------------
		-0.4f, 0.4f, 0.0f,
		-0.3f, 0.4f, 0.0f,
		-0.3f, 0.3f, 0.0f,

		-0.4f, 0.4f, 0.0f,
		-0.4f, 0.3f, 0.0f,
		-0.3f, 0.3f, 0.0f,
		
		//----------------
		-0.3f, 0.3f, 0.0f,
		-0.2f, 0.3f, 0.0f,
		-0.2f, 0.2f, 0.0f,

		-0.3f, 0.3f, 0.0f,
		-0.3f, 0.2f, 0.0f,
		-0.2f, 0.2f, 0.0f,
		//----------------
		-0.2f, 0.2f, 0.0f,
		-0.1f, 0.2f, 0.0f,
		-0.1f, 0.1f, 0.0f,

		-0.2f, 0.2f, 0.0f,
		-0.2f, 0.1f, 0.0f,
		-0.1f, 0.1f, 0.0f,
		//----------------
		-0.1f, 0.1f, 0.0f,
		0.0f, 0.1f, 0.0f,
		0.0f, 0.0f, 0.0f,

		-0.1f, 0.1f, 0.0f,
		-0.1f, 0.0f, 0.0f,
		0.0f, 0.0f, 0.0f,
		//----------------
		0.0f, 0.0f, 0.0f,
		0.1f, 0.0f, 0.0f,
		0.1f, -0.1f, 0.0f,

		0.0f, 0.0f, 0.0f,
		0.0f, -0.1f, 0.0f,
		0.1f, -0.1f, 0.0f,
		//----------------
		-0.2f, -0.3f, 0.0f,
		-0.1f, -0.3f, 0.0f,
		-0.1f, -0.4f, 0.0f,

		-0.2f, -0.3f, 0.0f,
		-0.2f, -0.4f, 0.0f,
		-0.1f, -0.4f, 0.0f,
		//----------------
		-0.1f, -0.2f, 0.0f,
		0.1f, -0.2f, 0.0f,
		0.1f, -0.3f, 0.0f,

		-0.1f, -0.2f, 0.0f,
		-0.1f, -0.3f, 0.0f,
		0.1f, -0.3f, 0.0f,
		//----------------
		0.1f, -0.1f, 0.0f,
		0.1f, -0.2f, 0.0f,
		0.2f, -0.2f, 0.0f,

		0.1f, -0.1f, 0.0f,
		0.2f, -0.1f, 0.0f,
		0.2f, -0.2f, 0.0f,
		//----------------
		0.2f, 0.1f, 0.0f,
		0.3f, 0.1f, 0.0f,
		0.3f, -0.1f, 0.0f,

		0.2f, 0.1f, 0.0f,
		0.2f, -0.1f, 0.0f,
		0.3f, -0.1f, 0.0f,
		//----------------
		0.3f, 0.2f, 0.0f,
		0.4f, 0.2f, 0.0f,
		0.4f, 0.1f, 0.0f,

		0.3f, 0.2f, 0.0f,
		0.3f, 0.1f, 0.0f,
		0.4f, 0.1f, 0.0f,
	};

	//we assign a colour to each corner (each colour is RGB)
	const GLfloat colors[] = {
		
		1.0f, 1.0f, 1.0f,	
		1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,
		1.0f, 1.0f, 1.0f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,


		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

			
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,


		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,		

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,


		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,		

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,


		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,		

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,


		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,		

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,		

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,		

		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,
		0.428f, 0.264f, 0.000f,

		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,
		0.010f, 0.037f, 0.031f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,

		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,
		0.026f, 0.200f, 0.220f,


		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,

		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,

		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,

		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,

		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,

		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,

		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,

		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,
		0.155f, 0.155f, 0.155f,



		
		



		
	};

	// The index buffer references the vertices we paint, in order
	//here we have two triangles
	const GLuint indices[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
		86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
		160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
		231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,
		303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374,
	    375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450};//384

 	//**********************
	// CODE TO LOAD EVERYTHING INTO MEMORY
	//**********************

	//load the shader
	Shader simpleShader("src/shader.vert", "src/shader.frag");
	g_simpleShader = simpleShader.program;

	// Create the VAO where we store all geometry (stored in g_Vao)
	g_Vao = gl_createAndBindVAO();

	//create vertex buffer for positions, colors, and indices, and bind them to shader
	gl_createAndBindAttribute(vertices, sizeof(vertices), g_simpleShader, "a_vertex", 3);
	gl_createAndBindAttribute(colors, sizeof(colors), g_simpleShader, "a_color", 3);
	gl_createIndexBuffer(indices, sizeof(indices));

	//unbind everything
	gl_unbindVAO();

	//store number of triangles (use in draw())
	g_NumTriangles = sizeof(indices) / (sizeof(GLuint) * 3);
}

// ------------------------------------------------------------------------------------------
// This function actually draws to screen and called non-stop, in a loop
// ------------------------------------------------------------------------------------------
void draw()
{
	//clear the screen
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	// activate shader
	glUseProgram(g_simpleShader);

	//bind the geometry
	gl_bindVAO(g_Vao);

	// Draw to screen
	glDrawElements(GL_TRIANGLES, 3 * g_NumTriangles, GL_UNSIGNED_INT, 0);

}

// ------------------------------------------------------------------------------------------
// This function is called every time you press a screen
// ------------------------------------------------------------------------------------------
void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
    //quit
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS)
        glfwSetWindowShouldClose(window, 1);
	//reload
	if (key == GLFW_KEY_R && action == GLFW_PRESS)
		load();
}

// ------------------------------------------------------------------------------------------
// This function is called every time you click the mouse
// ------------------------------------------------------------------------------------------
void mouse_button_callback(GLFWwindow* window, int button, int action, int mods) {
    if (button == GLFW_MOUSE_BUTTON_LEFT) {
        cout << "Left mouse down at" << mouse_x << ", " << mouse_y << endl;
    }
}

int main(void)
{
	//setup window and boring stuff, defined in glfunctions.cpp
	GLFWwindow* window;
	if (!glfwInit())return -1;
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	window = glfwCreateWindow(g_ViewportWidth, g_ViewportHeight, "Hello OpenGL!", NULL, NULL);
	if (!window) {glfwTerminate();	return -1;}
	glfwMakeContextCurrent(window);
	glewExperimental = GL_TRUE;
	glewInit();

	//input callbacks
	glfwSetKeyCallback(window, key_callback);
	glfwSetMouseButtonCallback(window, mouse_button_callback);
	glfwSetInputMode(window, GLFW_STICKY_KEYS, 1);

	//load all the resources
	load();

    // Loop until the user closes the window
    while (!glfwWindowShouldClose(window))
    {
		draw();
        
        // Swap front and back buffers
        glfwSwapBuffers(window);
        
        // Poll for and process events
        glfwPollEvents();
        
        //mouse position must be tracked constantly (callbacks do not give accurate delta)
        glfwGetCursorPos(window, &mouse_x, &mouse_y);
    }

    //terminate glfw and exit
    glfwTerminate();
    return 0;
}


